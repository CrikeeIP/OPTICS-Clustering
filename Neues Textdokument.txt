

//-------------------------------------------------------------------------------------------------------------------------------
//Cluster Test mit PointImages
//-------------------------------------------------------------------------------------------------------------------------------

std::vector<std::array<int,2>> load_points_from_image( const std::string& file_path )
{
	const cv::Mat img = cv::imread( file_path, cv::IMREAD_GRAYSCALE );
	assert( img.size().area() != 0 );
	std::vector<std::array<int, 2>> result;
	for ( int y = 0; y < img.rows; ++y )
	{
		for ( int x = 0; x < img.cols; ++x )
		{
			if ( img.at<unsigned char>( y, x ) != 0 )
			{
				result.push_back( { x, y } );
			}
		}
	}
return result;
}

int main()
{
	const auto points = load_points_from_image( "D:/ClusterImg_01.png" );

	std::size_t min_pts = 10;
	auto eps = optics::epsilon_estimation( points, min_pts );
	
	auto reach_dists = optics::compute_reachability_dists( points, min_pts, eps );
	for ( std::size_t l = 0; l < 1000; l++ ) {
		reach_dists = optics::compute_reachability_dists( points, min_pts, eps );
	}
	auto reach_img = optics::draw_reachability_plot( reach_dists );
	reach_img.save( "D:/ReachDists" );
	
	{
		auto clusters = optics::get_cluster_points( reach_dists, 70, points );
		auto img = optics::draw_2d_clusters( clusters );
		img.save( "D:/ClusterImg_70" );
	}
	{
		auto clusters = optics::get_cluster_points( reach_dists, 50, points );
		auto img = optics::draw_2d_clusters( clusters );
		img.save( "D:/ClusterImg_50" );
	}
	{
		auto clusters = optics::get_cluster_points( reach_dists, 20, points );
		auto img = optics::draw_2d_clusters( clusters );
		img.save( "D:/ClusterImg_40" );
	}

	{
		//Chi Clusters
		double chi = 0.1;
		
		auto chi_img = optics::draw_reachability_plot_with_chi_clusters( reach_dists, chi, min_pts );
		chi_img.save( "D:/Reachdists_ChiCluster" );

		auto chi_clusters = optics::get_chi_clusters( reach_dists, chi, min_pts );
		std::vector<optics::chi_cluster_indices> chi_clusters_flat;
		chi_clusters_flat = fplus::concat( fplus::transform( optics::flatten_dfs<optics::chi_cluster_indices>, chi_clusters ) );
		auto cluster_pts = optics::get_cluster_points( reach_dists, chi_clusters_flat, points );
		auto chi_cluster_img = optics::draw_2d_clusters( cluster_pts );
		chi_cluster_img.save( "D:/ChiClusterImg" );
	}
}
